apiVersion: v1
kind: Namespace
metadata:
  name: <%= ENV['APP'] %>
---
apiVersion: v1
data:
  # base64 encoded string of the config.json contents
  .dockerconfigjson: <%= ENV['DOCKER_CONFIG_JSON_CHEFOPS'] %>
kind: Secret
metadata:
  name: registry-secret
  namespace: <%= ENV['APP'] %>
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: <%= ENV['APP'] %>
imagePullSecrets:
- name: registry-secret
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: habitat-operator
  namespace: <%= ENV['APP'] %>
# use the secret defined earlier
imagePullSecrets:
- name: registry-secret
---
apiVersion: habitat.sh/v1beta1
kind: Habitat
metadata:
  name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
  # this gets translated to "habitat-name" by the operator,
  # and is used in the Service resource label (see below)
  labels:
    app: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
customVersion: v1beta2
spec:
  v1beta2:
    image: chefops/<%= ENV['APP'] %>:<%= ENV['IMAGE_TAG'] %>
    count: <%= ENV['ENVIRONMENT'] == 'production' ? '3' : '2' %>
    env:
      - name: HAB_LICENSE
        value: accept-no-persist
      - name: REDIS_URL
        valueFrom:
          secretKeyRef:
            name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
            key: redis_url
    service:
      name: <%= ENV['APP'] %>
      topology: standalone
      # Not needed because we don't change anything any more
      #configSecretName: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] == 'production' ? ENV['ENVIRONMENT'] : 'nonproduction' %>
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: <%= ENV['APP'] %>-poller-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - image: chefops/<%= ENV['APP'] %>:<%= ENV['IMAGE_TAG'] %>
            name: <%= ENV['APP'] %>-poller
            command: ['/bin/sh']
            args: ['-c', 'cd $(hab pkg path chefops/<%= ENV['APP'] %>)/app; bundle exec $(hab pkg path core/ruby24)/bin/ruby ./poller 2>&1']
            env:
              - name: HAB_LICENSE
                value: accept-no-persist
              - name: REDIS_URL
                valueFrom:
                  secretKeyRef:
                    name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
                    key: redis_url
          restartPolicy: Never
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    <%- if ENV['ENVIRONMENT'] == 'production' -%>
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-emit-interval: "60"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "chef-utility-kubernetes-elb-access-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "<%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>"
    <%- end -%>
    <%- if ENV.has_key?('AWS_SSL_INTERNAL_ARN') -%>
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: <%= ENV['AWS_SSL_INTERNAL_ARN'] %>
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    <%- end -%>
    dns.alpha.kubernetes.io/external: "<%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>.kubernetes.chef.co"
  labels:
    run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
    dns: route53
  name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  ports:
  <%- if ENV.has_key?('AWS_SSL_INTERNAL_ARN') -%>
  - name: https
    port: 443
  <%- else -%>
  - name: http
    port: 80
  <%- end -%>
    protocol: TCP
    targetPort: 8000
  selector:
    habitat-name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  sessionAffinity: None
  type: LoadBalancer
