new-module -name Omnitruck -scriptblock {
function New-Uri {
  param ($baseuri, $newuri)

  new-object System.Uri $baseuri, $newuri
}

function Get-WebContent {
  param ($uri, $filepath)
  $proxy = New-Object -TypeName System.Net.WebProxy
  $wc = new-object System.Net.WebClient
  $proxy.Address = $env:http_proxy
  $wc.Proxy = $proxy

  try {
    if ([string]::IsNullOrEmpty($filepath)) {
      $wc.downloadstring($uri)
    }
    else {
      $wc.downloadfile($uri, $filepath)
    }
  }
  catch {
    $exception = $_.Exception
    Write-Host "There was an error: "
    do {
      Write-Host "`t$($exception.message)"
      $exception = $exception.innerexception
    } while ($exception)
    throw "Failed to download from $uri."
  }
}

function Get-ProjectMetadata {
  <#
    .SYNOPSIS
    Get metadata for a Chef Software, Inc. project
    .DESCRIPTION
    Get metadata for project
    .EXAMPLE
    iex (new-object net.webclient).downloadstring('https:/omnitruck.chef.io/install.ps1'); Get-ProjectMetadata -project chef -channel stable

    Gets the download url, MD5 checksum, and SHA256 checksum for the latest stable release of Chef.
    .EXAMPLE
    iex (irm 'https://omnitruck.chef.io/install.ps1'); Get-ProjectMetadata -project chefdk -channel stable -version 0.8.0

    Gets the download url, MD5 checksum, and SHA256 checksum for ChefDK 0.8.0.
  #>
  [cmdletbinding()]
  param (
    # Base url to retrieve metadata from.
    [uri]$base_server_uri = '<%= locals[:base_url] %>',
    [string]
    # Project to install
    # chef - Chef Client
    # chefdk - Chef Development Kit
    # angrychef - AngryChef
    # server and container are not valid windows targets
    [validateset('chef', 'chefdk', 'angrychef')]
    [string]
    $project = 'chef',
    # Version of the application to install
    # This parameter is optional, if not supplied it will provide the latest version,
    # and if an iteration number is not specified, it will grab the latest available iteration.
    # Partial version numbers are also acceptable (using v=11
    # will grab the latest 11.x client which matches the other flags).
    [string]
    $version,
    # Release channel to install from
    [validateset('current', 'stable')]
    [string]
    $channel = 'stable',
    # The following legacy switches are just aliases for the current channel
    [switch]
    $prerelease,
    [switch]
    $nightlies
  )

  # The following legacy switches are just aliases for the current channel
  if (($prerelease -eq $true)) { $channel = 'current'}
  if (($nightlies -eq $true)) { $channel = 'current'}

  # PowerShell is only on Windows ATM
  $platform = 'windows'
  Write-Verbose "Platform: $platform"

  # TODO: No Win10 build endpoint yet
  switch -regex ((get-wmiobject win32_operatingsystem).version) {
    '10\.0\.\d+' {$platform_version = '2012r2'}
    '6\.3\.\d+'  {$platform_version = '2012r2'}
    '6\.2\.\d+'  {$platform_version = '2012'}
    '6\.1\.\d+'  {$platform_version = '2008r2'}
    '6\.0\.\d+'  {$platform_version = '2008'}
  }
  Write-Verbose "Platform Version: $platform_version"

  # TODO: When we ship a 64 bit ruby for Windows.
  $machine = 'x86_64'
  Write-Verbose "Machine: $machine"
  Write-Verbose "Project: $project"

  $metadata_base_url = "$($channel)/$($project)/metadata"
  $metadata_array = ("?v=$($version)",
    "p=$platform",
    "pv=$platform_version",
    "m=$machine")
  $metadata_base_url += [string]::join('&', $metadata_array)
  $metadata_url = new-uri $base_server_uri $metadata_base_url

  Write-Verbose "Downloading $project details from $metadata_url"
  $package_metadata = (Get-WebContent $metadata_url).trim() -split '\n' |
    foreach { $hash = @{} } {$key, $value = $_ -split '\s+'; $hash.Add($key, $value)} {$hash}

  Write-Verbose "Project details: "
  foreach ($key in $package_metadata.keys) {
    Write-Verbose "`t$key = $($package_metadata[$key])"
  }
  $package_metadata
}

function Test-ProjectPackage {
  [cmdletbinding()]
  param ($Path, $Algorithm = 'SHA256', $Hash)

  if (-not (get-command get-filehash))   {
    function disposable($o){($o -is [IDisposable]) -and (($o | get-member | foreach-object {$_.name}) -contains 'Dispose')}
    function use($obj, [scriptblock]$sb){try {& $sb} catch [exception]{throw $_} finally {if (disposable $obj) {$obj.Dispose()}} }
    function Get-FileHash ($Path, $Algorithm) {
      $Path = (resolve-path $path).providerpath
      $hash = @{Algorithm = $Algorithm; Path = $Path}
      if ($Algorithm -like 'MD5') {
        use ($c = New-Object -TypeName Security.Cryptography.MD5CryptoServiceProvider) {
          use ($in = (gi $path).OpenRead()) {
            $hash.Hash = ([BitConverter]::ToString($c.ComputeHash($in))).Replace("-", "").ToUpper()
          }
        }
      }
      elseif ($Algorithm -like 'SHA256') {
        use ($c = New-Object -TypeName Security.Cryptography.SHA256CryptoServiceProvider) {
          use ($in = (gi $path).OpenRead()) {
            $hash.Hash = ([BitConverter]::ToString($c.ComputeHash($in))).Replace("-", "").ToUpper()
          }
        }
      }
      new-object PSObject -Property $hash
    }
  }
  Write-Verbose "Testing the $Algorithm hash for $path."
  $ActualHash = (Get-FileHash -Algorithm $Algorithm -Path $Path).Hash.ToLower()
  Write-Verbose "`tDesired Hash - '$hash'"
  Write-Verbose "`tActual Hash  - '$ActualHash'"
  $Valid = $ActualHash -eq $Hash
  if (-not $Valid) {
    Write-Error "Failed to validate the downloaded installer.  The expected $Algorithm hash was '$Hash' and the actual hash was '$ActualHash' for $path"
  }
  return $Valid
}

function Install-Project {
  <#
    .SYNOPSIS
    Install a Chef Software, Inc. product
    .DESCRIPTION
    Install a Chef Software, Inc. product
    .EXAMPLE
    iex (new-object net.webclient).downloadstring('https:/omnitruck.chef.io/install.ps1'); Install-Project -project chef -channel stable

    Installs the latest stable version of Chef.
    .EXAMPLE
    iex (irm 'https://omnitruck.chef.io/install.ps1'); Install-Project -project chefdk -channel current

    Installs the latest integration build of the Chef Development Kit
  #>
  [cmdletbinding(SupportsShouldProcess=$true)]
  param (
    # Project to install
    # chef - Chef Client
    # chefdk - Chef Development Kit
    # angrychef - AngryChef
    # server and container are not valid windows targets
    [validateset('chef', 'chefdk', 'angrychef')]
    [string]
    $project = 'chef',
    # Release channel to install from
    [validateset('current', 'stable')]
    [string]
    $channel = 'stable',
    # Version of the application to install
    # This parameter is optional, if not supplied it will provide the latest version,
    # and if an iteration number is not specified, it will grab the latest available iteration.
    # Partial version numbers are also acceptable (using v=11
    # will grab the latest 11.x client which matches the other flags).
    [string]
    $version,
    # Full path for the downloaded installer.
    [string]
    $filename,
    # Full path to the location to download the installer
    [string]
    $download_directory = $env:temp,
    # The following legacy switches are just aliases for the current channel
    [switch]
    $prerelease,
    [switch]
    $nightlies
  )

  $package_metadata = Get-ChefProjectMetadata -project $project -channel $channel -version $version -prerelease:$prerelease -nightlies:$nightlies

  if (-not [string]::IsNullOrEmpty($filename)) {
    $download_directory = split-path $filename
    $filename = split-path $filename -leaf
    if ([string]::IsNullOrEmpty($download_directory)) {
      $download_directory = $pwd
    }
  }
  else {
    $filename = ($package_metadata.url -split '/')[-1]
  }
  Write-Verbose "Download directory: $download_directory"
  Write-Verbose "Filename: $filename"

  if (-not (test-path $download_directory)) {
    mkdir $download_directory
  }
  $download_directory = (resolve-path $download_directory).providerpath
  $download_destination = join-path $download_directory $filename

  if ((test-path $download_destination) -and
    (Test-ProjectPackage -Path $download_destination -Algorithm 'SHA256' -Hash $package_metadata.sha256 -ea SilentlyContinue)){
    Write-Verbose "Found existing valid installer at $download_destination."
  }
  else {
    if ($pscmdlet.ShouldProcess("$($package_metadata.url)", "Download $project")) {
      Write-Verbose "Downloading $project from $($package_metadata.url) to $download_destination."
      Get-WebContent $package_metadata.url -filepath $download_destination
    }
  }

  if ($pscmdlet.ShouldProcess("$download_destination", "Installing")){
    if (Test-ProjectPackage -Path $download_destination -Algorithm 'SHA256' -Hash $package_metadata.sha256) {
      Write-Host "Installing $project from $download_destination"
      $p = Start-Process -FilePath "msiexec" -ArgumentList "/qn /i $download_destination" -Passthru -Wait
      if ($p.ExitCode -ne 0) {
        throw "msiexec was not successful. Received exit code $($p.ExitCode)"
      }
    }
    else {
      throw "Failed to validate the downloaded installer for $project."
    }
  }
}
set-alias install -value Install-Project
export-modulemember -function 'Install-Project','Get-ProjectMetadata' -alias 'install'
}
