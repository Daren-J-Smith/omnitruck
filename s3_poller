#! /usr/bin/env ruby

require 'yajl'
require 'yaml'
require 'optparse'

require_relative 'lib/chef/project'
require_relative 'lib/chef/project_cache'
require_relative 'lib/chef/channel'

class S3Poller

  CHEF_CLIENT_RELEASE_MANIFESTS = "chef-release-manifest"
  CHEF_PLATFORM_NAMES = "chef-platform-names.json"

  ANGRYCHEF_RELEASE_MANIFESTS = "angrychef-release-manifest"
  ANGRYCHEF_PLATFORM_NAMES = "angrychef-platform-names.json"

  CHEF_SERVER_RELEASE_MANIFESTS = "chef-server-release-manifest"
  CHEF_SERVER_PLATFORM_NAMES = "chef-server-platform-names.json"

  CHEFDK_RELEASE_MANIFESTS = "chefdk-release-manifest"
  CHEFDK_PLATFORM_NAMES = "chefdk-platform-names.json"

  CHEF_CONTAINER_RELEASE_MANIFESTS = "chef-container-release-manifest"
  CHEF_CONTAINER_PLATFORM_NAMES = "chef-container-platform-names.json"

  attr_reader :config

  def initialize
    @options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} -e <environment>"

      opts.on_tail('-h', '--help', 'Print this help message') do
        puts opts
        exit
      end
      opts.on('-e ENVIRONMENT',
              "Specify this application's environment - REQUIRED") do |e|
        @options[:environment] = e
      end
    end
    optparse.parse!

    @options[:config] = "./config/config.yml"

    required = [:environment, :config]
    missing = required.select { |opt| @options[opt].nil? }
    unless missing.empty?
      puts "[ERROR] Missing required options: #{missing.join(', ')}"
      puts optparse
      exit 1
    end

    unless File.exists?(@options[:config])
      puts "[ERROR] Config file could not be found at #{@options[:config]}"
      puts optparse
      exit 1
    end

    @config = YAML.load_file(@options[:config])[@options[:environment]]
  end

  def run
    channels.each do |channel|
      Chef::Project::all_projects_for_channel(channel).each do |project|
        Chef::ProjectCache.new(project, metadata_dir).update
      end
    end
  end

  def metadata_dir
    config['metadata_dir']
  end

  def channels
    config['channels'].map do |(channel_name, channel_info)|
      Chef::Channel.new(
        channel_name,
        metadata_dir,
        channel_info['aws_metadata_bucket'],
        channel_info['aws_packages_bucket']
      )
    end
  end
end

if $0 == __FILE__
  S3Poller.new.run
end

exit
